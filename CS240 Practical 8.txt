Cs240 Practical 8a)

Philosopher 4 eating.
Philosopher 4 thinking.
Philosopher 2 thinking.
Philosopher 1 hungry.
Philosopher 1 eating.
Philosopher 1 thinking.
Philosopher 3 hungry.
Philosopher 3 eating.
Philosopher 0 hungry.
Philosopher 0 eating.

Cs240 Practical 8b)

class DiningPhilosophers {
	public static void main(String args[]) {
		Semaphore chopSticks[];
		Philosopher workerThread[];
		Semaphore room;
		room=new Semaphore(4);

		// Create an array of five Semaphore Object Reference Handles
		chopSticks = new Semaphore[5];

		// Create five Binary Semaphore Objects and assign to the array
		for (int i=0; i<5; i++)
			chopSticks[i] = new Semaphore(1); // Semaphore initial value=1

		// Create an array of five Philosopher Thread Object Reference Handles
		workerThread = new Philosopher[5];

		// Create and initiate five Philosopher Thread Objects
		for (int i=0; i<5; i++) {
			workerThread[i] = new Philosopher(i, chopSticks,room);
			workerThread[i].start();
		}
	}
}





// The Philosopher class implements a run() method defining the behaviour of a Philosopher thread

class Philosopher extends Thread {
	private int myName;
	private Semaphore chopSticks[];
	Semaphore room;
	//
	// This is the constructor function which is executed when a Philosopher
	// thread is first created
	//
	public Philosopher(int myName, Semaphore chopSticks[],Semaphore room) {
		this.myName = myName; // 'this' distinguishes the local private variable from the parameter
		this.chopSticks = chopSticks;
		this.room=room;
	}

	//
	// This is what each philosopher thread executes
	//
	
	
	
	public void run() {
		
		while (true) {
			
			
			
			room.acquire();
			
			System.out.println("Philosopher "+myName+" thinking.");
			try {
				sleep ((int)(Math.random()*20000));
			} catch (InterruptedException e) {}

			System.out.println("Philosopher "+myName+" hungry.");
			chopSticks[myName].acquire(); // Acquire left
			chopSticks[(myName+1)%5].acquire(); // Acquire right
			
			System.out.println("Philosopher "+myName+" eating.");
			try { // Simulate eating activity for a random time
				sleep ((int)(Math.random()*10000));
			} catch (InterruptedException e) {}

			chopSticks[myName].release(); // Release left
			chopSticks[(myName+1)%5].release(); // Release right
			
			room.release();
			
		}
	}
}


CS240 Practical 8c)

class DiningPhilosophers {
	public static void main(String args[]) {
		Semaphore chopSticks[];
		Philosopher workerThread[];

		// Create an array of five Semaphore Object Reference Handles
		chopSticks = new Semaphore[5];

		// Create five Binary Semaphore Objects and assign to the array
		for (int i=0; i<5; i++)
			chopSticks[i] = new Semaphore(1); // Semaphore initial value=1

		// Create an array of five Philosopher Thread Object Reference Handles
		workerThread = new Philosopher[5];

		// Create and initiate five Philosopher Thread Objects
		for (int i=0; i<5; i++) {
			workerThread[i] = new Philosopher(i, chopSticks);
			workerThread[i].start();
		}
	}
} 





// The Philosopher class implements a run() method defining the behaviour of a Philosopher thread

class Philosopher extends Thread {
	private int myName;
	private Semaphore chopSticks[];
	//
	// This is the constructor function which is executed when a Philosopher
	// thread is first created
	//
	public Philosopher(int myName, Semaphore chopSticks[]) {
		this.myName = myName; // 'this' distinguishes the local private variable from the parameter
		this.chopSticks = chopSticks;
	}

	//
	// This is what each philosopher thread executes
	//
	public void run() {
		while (true) {
			
			
			
			System.out.println("Philosopher "+myName+" thinking.");
			try {
				sleep ((int)(Math.random()*20000));
			} catch (InterruptedException e) {}

			System.out.println("Philosopher "+myName+" hungry.");
			
			
			System.out.println("Philosopher "+myName+" eating.");
			try { // Simulate eating activity for a random time
				sleep ((int)(Math.random()*10000));
			} catch (InterruptedException e) {}

			chopSticks[myName].release(); // Release left
			chopSticks[(myName+1)%5].release(); // Release right
			
			if((myName%2)==0) {
				chopSticks[myName].acquire();
				chopSticks[(myName+1)%5].acquire();
			}
			else {
				chopSticks[(myName+1)%5].acquire();
				chopSticks[myName].acquire();
			}
		}
	}
}